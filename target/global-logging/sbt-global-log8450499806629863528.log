[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\alejandro.montoya\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\alejandro.montoya\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.9 (Oracle Corporation Java 21.0.2)
[debug] Load.defaultLoad until apply took 171.4661ms
[debug]           Load.loadUnit: plugins took 197.009ms
[debug]           Load.loadUnit: defsScala took 0.5404ms
[debug] [Loading] Scanning directory C:\Users\alejandro.montoya\IdeaProjects\klasndjkhsjk\project
[debug]             Load.loadUnit: mkEval took 14.9349ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\alejandro.montoya\IdeaProjects\klasndjkhsjk\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 20.9189 ms
[info] loading settings for project klasndjkhsjk-build from idea1.sbt ...
[debug]               Load.resolveProject(klasndjkhsjk-build) took 64.6108ms
[debug]             Load.loadTransitive: finalizeProject(Project(id klasndjkhsjk-build, base: C:\Users\alejandro.montoya\IdeaProjects\klasndjkhsjk\project, plugins: List(<none>))) took 95.5824ms
[debug] [Loading] Done in C:\Users\alejandro.montoya\IdeaProjects\klasndjkhsjk\project, returning: (klasndjkhsjk-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 4256.4861ms
[debug]           Load.loadUnit: cleanEvalClasses took 17.3ms
[debug]         Load.loadUnit(file:/C:/Users/alejandro.montoya/IdeaProjects/klasndjkhsjk/project/, ...) took 4483.1238ms
[debug]       Load.apply: load took 4689.144ms
[debug]       Load.apply: resolveProjects took 6.5073ms
[debug]       Load.apply: finalTransforms took 77.3246ms
[debug]       Load.apply: config.delegates took 9.239ms
[debug]       Load.apply: Def.make(settings)... took 465.1038ms
[debug]       Load.apply: structureIndex took 132.5967ms
[debug]       Load.apply: mkStreams took 2.0481ms
[info] loading project definition from C:\Users\alejandro.montoya\IdeaProjects\klasndjkhsjk\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 7855.1177ms
[debug]     Load.loadUnit: defsScala took 0.003ms
[debug] [Loading] Scanning directory C:\Users\alejandro.montoya\IdeaProjects\klasndjkhsjk
[debug]       Load.loadUnit: mkEval took 0.4675ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 6.3693 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 100.5492ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\alejandro.montoya\IdeaProjects\klasndjkhsjk, plugins: List(<none>))) took 110.6286ms
[debug] [Loading] Done in C:\Users\alejandro.montoya\IdeaProjects\klasndjkhsjk, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2881.0027ms
[debug]     Load.loadUnit: cleanEvalClasses took 70.707ms
[debug]   Load.loadUnit(file:/C:/Users/alejandro.montoya/IdeaProjects/klasndjkhsjk/, ...) took 10809.8228ms
[debug] Load.apply: load took 10849.1747ms
[debug] Load.apply: resolveProjects took 0.2571ms
[debug] Load.apply: finalTransforms took 61.6509ms
[debug] Load.apply: config.delegates took 0.8557ms
[debug] Load.apply: Def.make(settings)... took 154.2565ms
[debug] Load.apply: structureIndex took 78.6981ms
[debug] Load.apply: mkStreams took 0.0034ms
[info] set current project to klasndjkhsjk (in build file:/C:/Users/alejandro.montoya/IdeaProjects/klasndjkhsjk/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58190 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58190, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to klasndjkhsjk (in build file:/C:/Users/alejandro.montoya/IdeaProjects/klasndjkhsjk/)
[debug] > Exec(idea-shell, None, None)
